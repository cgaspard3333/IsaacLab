#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (0.22749904676024077, 0.1671975132574127, 0.26624739017881244)
                double3 target = (-0.1440581448093289, -0.044121224850119156, 0.0672226068201627)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./cartpole_rhoban_custom.usda"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        int refinementOverrideImplVersion = 0
        dictionary renderSettings = {
        }
    }
    defaultPrim = "cartpole"
    endTimeCode = 1000000
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Z"
)

def Xform "cartpole" (
    prepend apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
)
{
    bool physxArticulation:enabledSelfCollisions = 0
    quatf xformOp:orient = (1, 0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0.15)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Xform "cart" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        bool physics:kinematicEnabled = 0
        float physics:mass = 1
        bool physics:rigidBodyEnabled = 1
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "Cube" (
            delete apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI"]
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </cartpole/Looks/cart_material> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.02, 0.02, 0.02)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "pole" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        bool physics:kinematicEnabled = 0
        float physics:mass = 0.01
        bool physics:rigidBodyEnabled = 1
        vector3f physics:velocity = (1.123038e-8, -2.130603e-11, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "Cube" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </cartpole/Looks/pole_material> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.005, 0.005, 0.1)
            double3 xformOp:translate = (0.013, 0, -0.046)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "cart_to_pole"
        {
            uniform token physics:axis = "X"
            rel physics:body0 = </cartpole/cart>
            rel physics:body1 = </cartpole/pole>
            float physics:breakForce = inf
            float physics:breakTorque = inf
            point3f physics:localPos0 = (0.013, 0, 5.9604646e-9)
            point3f physics:localPos1 = (0.013, 0, 5.9604646e-9)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "mass" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        bool physics:kinematicEnabled = 0
        float physics:mass = 1
        bool physics:rigidBodyEnabled = 1
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.013, 0, -0.09)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "Cylinder" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "X"
            float3[] extent = [(-0.05, -0.5, -0.5), (0.05, 0.5, 0.5)]
            double height = 0.1
            rel material:binding = </cartpole/Looks/mass_material> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double radius = 0.5
            custom bool refinementEnableOverride = 1
            custom int refinementLevel = 2
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.1, 0.029999999329447746, 0.029999999329447746)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "pole_to_mass"
        {
            rel physics:body0 = </cartpole/pole>
            rel physics:body1 = </cartpole/mass>
            float physics:breakForce = inf
            float physics:breakTorque = inf
            point3f physics:localPos0 = (0.013, 5.9604646e-9, -0.09)
            point3f physics:localPos1 = (0, 5.9604646e-9, -5.066395e-9)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def PhysicsFixedJoint "root_joint"
    {
        rel physics:body1 = </cartpole/cart>
        float physics:breakForce = inf
        float physics:breakTorque = inf
        point3f physics:localPos0 = (0, 0, 0.15)
        point3f physics:localPos1 = (0, 0, 0)
        quatf physics:localRot0 = (1, 0, 0, 0)
        quatf physics:localRot1 = (1, 0, 0, 0)
    }

    def Scope "Looks"
    {
        def Material "cart_material"
        {
            token outputs:mdl:displacement.connect = </cartpole/Looks/cart_material/Shader.outputs:out>
            token outputs:mdl:surface.connect = </cartpole/Looks/cart_material/Shader.outputs:out>
            token outputs:mdl:volume.connect = </cartpole/Looks/cart_material/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0, 0.4089574, 0.996139)
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "mass_material"
        {
            token outputs:mdl:displacement.connect = </cartpole/Looks/mass_material/Shader.outputs:out>
            token outputs:mdl:surface.connect = </cartpole/Looks/mass_material/Shader.outputs:out>
            token outputs:mdl:volume.connect = </cartpole/Looks/mass_material/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.01544404, 0, 0)
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "pole_material"
        {
            token outputs:mdl:displacement.connect = </cartpole/Looks/pole_material/Shader.outputs:out>
            token outputs:mdl:surface.connect = </cartpole/Looks/pole_material/Shader.outputs:out>
            token outputs:mdl:volume.connect = </cartpole/Looks/pole_material/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.44775724, 0.85714287, 0.19856587)
                token outputs:out (
                    renderType = "material"
                )
            }
        }
    }
}

def Xform "Environment"
{
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float inputs:angle = 1
        float inputs:intensity = 3000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        quatd xformOp:orient = (0.6532814824381883, 0.27059805007309845, 0.2705980500730985, 0.6532814824381882)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

